// Generated by CoffeeScript 1.3.1
(function() {
  var Transparency;

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    require('./spec_helper');
    Transparency = require('../src/transparency');
  }

  describe("Transparency", function() {
    it("should execute directive functions and assign return values to the matching attributes", function() {
      var directives, expected, person, template;
      template = $("<div class=\"person\">\n  <span class=\"name\"></span><span class=\"email\"></span>\n</div>");
      person = {
        firstname: 'Jasmine',
        lastname: 'Taylor',
        email: 'jasmine.tailor@example.com'
      };
      directives = {
        name: {
          text: function() {
            return "" + this.firstname + " " + this.lastname;
          }
        }
      };
      expected = $("<div class=\"person\">\n  <span class=\"name\">Jasmine Taylor</span>\n  <span class=\"email\">jasmine.tailor@example.com</span>\n</div>");
      template.render(person, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should allow setting html content with directives", function() {
      var directives, expected, person, template;
      template = $("<div class=\"person\">\n  <div class=\"name\"><div>FOOBAR</div></div><span class=\"email\"></span>\n</div>");
      person = {
        firstname: '<b>Jasmine</b>',
        lastname: '<i>Taylor</i>',
        email: 'jasmine.tailor@example.com'
      };
      directives = {
        name: {
          html: function() {
            return "" + this.firstname + " " + this.lastname;
          }
        }
      };
      expected = $("<div class=\"person\">\n  <div class=\"name\"><b>Jasmine</b> <i>Taylor</i><div>FOOBAR</div></div>\n  <span class=\"email\">jasmine.tailor@example.com</span>\n</div>");
      template.render({
        firstname: "Hello",
        lastname: "David"
      }, directives);
      template.render(person, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should handle nested directives", function() {
      var directives, expected, nameDecorator, person, template;
      template = $("<div class=\"person\">\n  <span class=\"name\"></span>\n  <span class=\"email\"></span>\n  <div class=\"friends\">\n    <div class=\"friend\">\n      <span class=\"name\"></span>\n      <span class=\"email\"></span>\n    </div>\n  </div>\n</div>");
      person = {
        firstname: 'Jasmine',
        lastname: 'Taylor',
        email: 'jasmine.taylor@example.com',
        friends: [
          {
            firstname: 'John',
            lastname: 'Mayer',
            email: 'john.mayer@example.com'
          }, {
            firstname: 'Damien',
            lastname: 'Rice',
            email: 'damien.rice@example.com'
          }
        ]
      };
      nameDecorator = function(element) {
        return "" + this.firstname + " " + this.lastname;
      };
      directives = {
        name: {
          text: nameDecorator
        },
        friends: {
          name: {
            text: nameDecorator
          }
        }
      };
      expected = $("<div class=\"person\">\n  <span class=\"name\">Jasmine Taylor</span>\n  <span class=\"email\">jasmine.taylor@example.com</span>\n  <div class=\"friends\">\n    <div class=\"friend\">\n      <span class=\"name\">John Mayer</span>\n      <span class=\"email\">john.mayer@example.com</span>\n    </div>\n    <div class=\"friend\">\n      <span class=\"name\">Damien Rice</span>\n      <span class=\"email\">damien.rice@example.com</span>\n    </div>\n  </div>\n</div>");
      template.render(person, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should restore the original attributes", function() {
      var directives, expected, persons, template;
      template = $("<ul id=\"persons\">\n  <li class=\"person\"></li>\n</ul>");
      persons = [
        {
          person: "me"
        }, {
          person: "you"
        }, {
          person: "others"
        }
      ];
      directives = {
        person: {
          "class": function(element, i) {
            return element.className + (i % 2 ? " odd" : " even");
          }
        }
      };
      expected = $("<ul id=\"persons\">\n  <li class=\"person even\">me</li>\n  <li class=\"person odd\">you</li>\n  <li class=\"person even\">others</li>\n</ul>");
      template.render(persons, directives);
      template.render(persons, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should allow directives without a return value", function() {
      var directives, expected, persons, template;
      template = $("<ul id=\"persons\">\n  <li class=\"person\"></li>\n</ul>");
      persons = [
        {
          person: "me"
        }, {
          person: "you"
        }, {
          person: "others"
        }
      ];
      directives = {
        person: {
          html: function(elem, i) {
            elem = jQuery(elem);
            elem.attr("foobar", "foo");
            elem.text(i + 1);
          }
        }
      };
      expected = $("<ul id=\"persons\">\n  <li class=\"person\" foobar=\"foo\">1</li>\n  <li class=\"person\" foobar=\"foo\">2</li>\n  <li class=\"person\" foobar=\"foo\">3</li>\n</ul>");
      template.render(persons, directives);
      template.render(persons, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    return it("should provide current attribute value as a parameter for the directives", function() {
      var data, directives, expected, template;
      template = $("<div id=\"template\">\n  <div class=\"name\">Hello, <span>Br, Transparency</span></div>\n</div>");
      data = {
        name: "World"
      };
      directives = {
        name: {
          text: function(elem, i, value) {
            return value + this.name + "!";
          }
        }
      };
      expected = $("<div id=\"template\">\n  <div class=\"name\">Hello, World!<span>Br, Transparency</span></div>\n</div>");
      template.render(data, directives);
      template.render(data, directives);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
  });

}).call(this);
