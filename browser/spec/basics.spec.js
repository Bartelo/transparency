// Generated by CoffeeScript 1.3.1
(function() {

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    require('./node_helper');
  }

  require('./spec_helper');

  describe("Transparency", function() {
    it("should ignore null context", function() {
      var data, expected, template;
      template = $('<div></div>');
      data = {
        hello: 'Hello'
      };
      expected = $('<div></div>');
      Transparency.render(template.find('#not_found')[0], data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should render empty container for null data", function() {
      var data, expected, template;
      template = $("<div>\n  <div class=\"container\">\n    <div class=\"hello\"></div>\n    <div class=\"goodbye\"></div>\n  </div>\n</div>");
      data = null;
      expected = $("<div>\n  <div class=\"container\">\n  </div>\n</div>");
      template.find('.container').render(data);
      expect(template.html()).htmlToBeEqual(expected.html());
      data = {
        hello: 'Hello'
      };
      expected = $("<div>\n  <div class=\"container\">\n    <div class=\"hello\">Hello</div>\n    <div class=\"goodbye\"></div>\n  </div>\n</div>");
      template.find('.container').render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should ignore null values", function() {
      var data, expected, template;
      template = $("<div class=\"container\">\n  <div class=\"hello\"></div>\n  <div class=\"goodbye\"></div>\n</div>");
      data = {
        hello: 'Hello',
        goodbye: null
      };
      expected = $("<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\"></div>\n</div>");
      template.render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should match model keys to template by element id, class, name attribute and data-bind attribute", function() {
      var data, expected, res, template;
      template = $("<div class=\"container\">\n  <div id=\"my-id\"></div>\n  <div class=\"my-class\"></div>\n  <div data-bind=\"my-data\"></div>\n</div>");
      data = {
        'my-id': 'id-data',
        'my-class': 'class-data',
        'my-data': 'data-bind'
      };
      expected = $("<div class=\"container\">\n  <div id=\"my-id\">id-data</div>\n  <div class=\"my-class\">class-data</div>\n  <div data-bind=\"my-data\">data-bind</div>\n</div>");
      res = template.render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should handle nested templates", function() {
      var data, expected, template;
      template = $("<div class=\"container\">\n  <div class=\"greeting\">\n    <span class=\"name\"></span>\n    <div class=\"greeting\"></div>\n  </div>\n</div>");
      data = {
        greeting: 'Hello',
        name: 'World'
      };
      expected = $("<div class=\"container\">\n  <div class=\"greeting\">Hello<span class=\"name\">World</span>\n    <div class=\"greeting\">Hello</div>\n  </div>\n</div>");
      template.render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    it("should work with numeric values", function() {
      var data, expected, template;
      template = $("<div class=\"container\">\n  <div class=\"hello\"></div>\n  <div class=\"goodbye\"></div>\n</div>");
      data = {
        hello: 'Hello',
        goodbye: 5
      };
      expected = $("<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">5</div>\n</div>");
      template.render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
    return it("should ignore functions in models", function() {
      var data, expected, template;
      template = $("<div class=\"container\">\n  <div class=\"hello\"></div>\n  <div class=\"goodbye\"></div>\n  <div class=\"skipped\"></div>\n</div>");
      data = {
        hello: 'Hello',
        goodbye: 5,
        skipped: function() {
          return "hello";
        }
      };
      expected = $("<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">5</div>\n  <div class=\"skipped\"></div>\n</div>");
      template.render(data);
      return expect(template.html()).htmlToBeEqual(expected.html());
    });
  });

}).call(this);
